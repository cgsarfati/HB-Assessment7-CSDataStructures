Hackbright Week 8 Practice Discussion Questions:


RUNTIME

1. When calculating the Big O notation for a particular algorithm, it’s necessary to consider the length of time it takes for the algorithm to run as the algorithm’s workload approaches infinity. You can think of the workload as the number of tasks required to complete a job. What determines the workload of figuring out whether your box of animal crackers contains an elephant?

The workload in this scenario is how many animal crackers there are to sift through. 

2. Order the following runtimes in descending order of efficiency (that is, fastest runtimes first, slowest last) as n approaches infinity. 

O(1)
O(log n)
O(n)
O(n log n)
O(n^2)
O(2^n)


STACKS AND QUEUES

1. In the following cases, would a stack or queue be a more appropriate data structure?
- The process of loading and unloading pallets onto a flatbed truck: STACK
- Putting bottle caps on bottles of beer as they roll down an assembly line: QUEUE
- Calculating the solution to this mathematical expression: 2 + (7 * 4) - (3 / 2): STACK

2. Describe two more situations where a queue would be an appropriate data structure.
- Caching: Storing temporary info (first in) and after a certain amount of time, the last item will be discarded (last out)
- “Waiting list” feature in a restaurant-reservation app. First person who submits waiting list form (first in) will be put into queue for a reservation to open up, in which user will then get that spot (first out)

3. Describe two more situations where a stack would be an appropriate data structure.
- Undo button in a grocery list app when you add an ingredient to the list. LIFO principle since “last in, first out” refers to taking out the last ingredient the user put. 
- Coding challenge where you would have to reverse a word. You would create an empty list, and push letters starting from the end of the original word to that list, then ultimately do a .join to turn the new list of characters into a string.

LINKED LISTS

Linked Lists

1. Given the linked list below, which are the nodes? What is the data for each node? Where is the head? Where is the tail? (Please be as specific as possible — exactly which parts of the diagram correspond to each part? Arrows? Boxes? Text?).

Nodes: Apple box, Berry box, Cherry box
Data: “Apple” text, “Berry” text, “Cherry” text
Head: Pointed to the Apple box
Tail: Does not exist in that specific example (if it did, it would be pointed to the Cherry node)

2. What’s the difference between doubly- and singly-linked lists?

DLLs’ arrows are bidirectional (next + previous attributes), allowing users to go forward or backward with any node in the list. This is different from a singly-linked list with a tail and head, since the user can never go “previous” to the current node — they can only go forward (either starting at head, or accessing end of list with tail).

3. Why is it faster to append to a linked list if we keep track of the tail as an attribute?

Having a tail allows O(1) since you don’t have to sift the list n times to add a node at the end. In a regular linked list, you always have to start at the head, and work your way down the nodes until you find the node with “none” assigned to its next attribute. With a tail, you just access where the tail is pointing to, skipping all that sifting.


